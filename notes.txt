install ubuntu
ubuntu xfce GUI Window manager
install XRDP - RDP server
connect with windows RDP client

Install Terraform
HCL
Provider

Terraform - AZ resources

gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg]     https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list



resource "local_file" "foo" {
    content  = "i love to code IaC"
    filename = "newfile.txt"
}



wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg


echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" |sudo tee /etc/apt/sources.list.d/hashicorp.list


https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/certification-associate-tutorials



Intalled TF
install Azurecli > login. manage az resources
vscode
use TF to manage az resources

az login
az login --tenant <ID>

az group list -o table

Lab Task:
Region: East US
Create A Vnet(virtual network) with 2 subnets
10.100.0.0/16, websubnet 10.100.1.0/24, dbsubnet 10.100.2.0/24

extramile: create Network sec group


https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_network

Installed VSCode / Azure cli
Created Azure Resource - RG. Vnet


Terraform Command Lines
Terraform CLI tricks:
terraform -install-autocomplete #Setup tab auto-completion, requires logging back in

Format and Validate Terraform code
terraform fmt #format code per HCL canonical standard
terraform validate #validate code for syntax
terraform validate -backend=false #validate code skip backend validation

Initialize your Terraform working directory
terraform init #initialize directory, pull down providers
terraform init -get-plugins=false #initialize directory, do not download plugins
terraform init -verify-plugins=false #initialize directory, do not verify plugins for Hashicorp signature

Plan, Deploy and Cleanup Infrastructure
terraform apply --auto-approve #apply changes without being prompted to enter “yes”
terraform destroy --auto-approve #destroy/cleanup deployment without being prompted for “yes”
terraform plan -out plan.out #output the deployment plan to plan.out
terraform apply plan.out #use the plan.out plan file to deploy infrastructure
terraform plan -destroy #outputs a destroy plan
terraform apply -target=aws_instance.my_ec2 #only apply/deploy changes to the targeted resource
terraform apply -var my_region_variable=us-east-1 #pass a variable via command-line while applying a configuration
terraform apply -lock=true #lock the state file so it can’t be modified by any other Terraform apply or modification action(possible only where backend allows locking)
terraform apply refresh=false # do not reconcile state file with real-world resources(helpful with large complex deployments for saving deployment time)




main.tf

# Create a resource group
resource "azurerm_resource_group" "example" {
  name     = var.azrg
  location = var.azloc
}

#create Virtual Network
resource "azurerm_virtual_network" "example" {
  name                = "example-network"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
  address_space       = ["10.100.0.0/16"]
  dns_servers         = ["8.8.8.8", "4.4.4.4"]

  subnet {
    name           = "websubnet"
    address_prefix = "10.100.1.0/24"
  }

  subnet {
    name           = "dbsubnet2"
    address_prefix = "10.100.2.0/24"
    security_group = azurerm_network_security_group.exampleNSG.id
  }

  tags = {
    environment = "Production"
  }
}

resource "azurerm_network_security_group" "exampleNSG" {
  name                = "DBNSG"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  security_rule {
    name                       = "allowwebtodb"
    priority                   = 1000
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = var.dbport
    source_address_prefix      = "10.100.1.0/24"
    destination_address_prefix = "10.100.2.0/24"
  }

  tags = {
    environment = "Production"
  }
}


providers.tf
# Azure Provider source and version being used
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=3.0.0"
    }
  }
}

# Configure the Microsoft Azure Provider
provider "azurerm" {
  features {}
}


Variable.tf

variable "azloc" {
  default = "eastus"
}
variable "azrg" {
  default = "19defaultrg"
}
variable "dbport" {
  default = "1403"
  type = number
}

lab task 19oct
https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-terraform

GITlink OCT DevOps:
https://github.com/akshajahan/TFlabs


https://learn.microsoft.com/en-us/azure/developer/terraform/
